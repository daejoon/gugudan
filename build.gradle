buildscript {
    ext {
        kotlinVersion = '1.3.10'
        springBootVersion = '2.1.0.RELEASE'
        flywayVersion = '5.2.1'
        h2Version = '1.4.197'
        yamlVersion = '1.23'
        kotlinLoggingVersion = '1.4.9'
    }

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://repo.spring.io/plugins-release" }
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")//기본은 final이다. open으로 변경한다.
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")//해당 클래스들의 기본 생성자(Arguments가 없는것)을 생성한다.
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.boxfuse.client:gradle-plugin-publishing:${flywayVersion}")
        classpath("com.h2database:h2:1.4.197")
        classpath("org.yaml:snakeyaml:1.23")
    }
}

/** plugins */
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-spring'//instead of "kotlin-allopen"
apply plugin: 'kotlin-jpa'//instead of "kotlin-noarg"
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.flywaydb.flyway'

allOpen {
    annotation "javax.persistence.Entity"
}

/**
 * Spring.profiles.active
 * 프로파일이 존재하면 application-{profile}.yml을 로딩한다.
 * 프로파일이 존재하지 않는다면 application.yml을 로딩한다.
 */
def SPRING_CONFIG = {
    def PROFILE  = System.getProperty("spring.profiles.active") ?: System.getenv("SPRING_PROFILES_ACTIVE")
    def PROFILE_YML = "${project.projectDir}/src/main/resources/application-${PROFILE}.yml"
    def DEFAULT_YML = "${project.projectDir}/src/main/resources/application.yml"
    def LoadConfig = { path ->
        try {
            return new org.yaml.snakeyaml.Yaml().load(new File(path).newInputStream())
        } catch (FileNotFoundException ex) {
            println ex.message
            return null
        }
    }

    println "Profile: ${PROFILE}"
    println "ProjectDir = ${project.projectDir}"

    return LoadConfig(PROFILE_YML) ?: LoadConfig(DEFAULT_YML)
}()


group = 'd2'
version = '0.0.9'
buildDir = 'build'
sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = 'd2.ApplicationKt'

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Gugudan', 'Implementation-Version': version, 'Main-Class': mainClassName
    }
    dependsOn configurations.runtime
    from {
        configurations.compile.collect {it.isDirectory()? it: zipTree(it)}
    }
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += 'src/main/java'
    main.resources.srcDirs += 'src/main/resources'
}

idea {
    module {
        def kaptMain = file("${buildDir}/generated/source/kapt/main")
        sourceDirs += kaptMain
        generatedSourceDirs += kaptMain
    }
}

springBoot  {
    buildInfo()
}

flyway {
    url = SPRING_CONFIG?.spring?.flyway?.gradle?.url
    user = SPRING_CONFIG?.spring?.flyway?.user

    println "flyway.url=${url}"
    println "flyway.user=${user}"
}

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin")
    compile("com.querydsl:querydsl-core")
    compile("com.querydsl:querydsl-jpa")
    compile("org.flywaydb:flyway-core")
    compile("io.github.microutils:kotlin-logging:${kotlinLoggingVersion}")
    compile("com.h2database:h2")
    runtime("org.springframework.boot:spring-boot-devtools")
    kapt("com.querydsl:querydsl-apt:4.1.4:jpa")// 끝에 :jpa로 끝난다.
    compile("org.springframework.boot:spring-boot-configuration-processor")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

compileJava.dependsOn(processResources)